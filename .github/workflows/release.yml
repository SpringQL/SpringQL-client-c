name: release

on:
  pull_request:
    types:
      - opened
      - synchronize
  # push:
  #   tags:
  #     - 'v*'

jobs:
  job-matrix:
    name: ${{ matrix.os }}; ${{ matrix.cross-target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: macos-latest
            cross-target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v2

      - name: Set build-target outputs
        id: set-build-target
        run: |
          if [[ "${{ matrix.cross-target }}" ]]; then
            echo "::set-output name=build-target::${{ matrix.cross-target }}"
          elif [[ ${{ matrix.os }} == "macos-latest" ]]; then
            echo "::set-output name=build-target::x86_64-apple-darwin"
          elif [[ ${{ matrix.os }} == "ubuntu-latest" ]]; then
            echo "::set-output name=build-target::x86_64-unknown-linux-gnu"
          else
            echo "Unknown OS: ${{ matrix.os }}"
            exit 1
          fi

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: llvm-tools-preview
          override: true

      - name: Install cross-build toolchain
        if: ${{ matrix.make.cross-target }}
        run: |
          rustup target add ${{ matrix.make.cross-target }}

      - name: debug build (straight build)
        if: ${{ ! matrix.make.cross-target }}
        run: |
          cargo build

      - name: debug build (cross build)
        if: ${{ matrix.make.cross-target }}
        run: |
          cargo build --target=${{ matrix.make.cross-target }}
          ls target/debug/
          find target/debug/
          
      - name: create debug artifact
        run: |
          d=springql_client-${{ steps.set-build-target.outputs.build-target }}-debug
          mkdir ${d}

          cp springql.h ${d}/
          mv target/debug/libspringql_client.{so,dylib} ${d}/ || :

          zip -r ${d}.zip ${d}

      - name: release build (straight build)
        if: ${{ ! matrix.make.cross-target }}
        run: |
          cargo build --release
      - name: create release artifact
        run: |
          d=springql_client-${{ steps.set-build-target.outputs.build-target }}-release
          mkdir ${d}

          cp springql.h ${d}/
          mv target/release/libspringql_client.{so,dylib} ${d}/ || :

          zip -r ${d}.zip ${d}

      # - name: Upload Files to a GitHub Release (${{ steps.set-build-target.outputs.os }})
      #   uses: svenstaro/upload-release-action@2.2.1
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file_glob: true
      #     file: springql_client-${{ steps.set-build-target.outputs.os }}-*.zip
      #     tag: ${{ github.ref }}
      #     overwrite: true
      #     prerelease: false
