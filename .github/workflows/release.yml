name: release

on:
  push:
    tags:
      - 'v*'

jobs:
  job-matrix:
    name: ${{ matrix.os }}; release:${{ matrix.release-build }}; ${{ matrix.cross-target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
          - os: ubuntu-latest
            release-build: true

          - os: ubuntu-latest
            cross-target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            cross-target: aarch64-unknown-linux-gnu
            release-build: true

          - os: macos-latest
          - os: macos-latest
            release-build: true

          - os: macos-latest
            cross-target: aarch64-apple-darwin
          - os: macos-latest
            cross-target: aarch64-apple-darwin
            release-build: true

    steps:
      - uses: actions/checkout@v2

      - name: Set outputs
        id: set-outputs
        run: |
          if [[ "${{ matrix.cross-target }}" ]]; then
            echo "::set-output name=build-target::${{ matrix.cross-target }}"
            echo "::set-output name=target-option::--target=${{ matrix.cross-target }}"
          elif [[ ${{ matrix.os }} == "macos-latest" ]]; then
            echo "::set-output name=build-target::x86_64-apple-darwin"
            echo "::set-output name=target-option::"
          elif [[ ${{ matrix.os }} == "ubuntu-latest" ]]; then
            echo "::set-output name=build-target::x86_64-unknown-linux-gnu"
            echo "::set-output name=target-option::"
          else
            echo "Unknown OS: ${{ matrix.os }}"
            exit 1
          fi

          if [[ "${{ matrix.release-build }}" ]]; then
            echo "::set-output name=release-build-option::--release"
            echo "::set-output name=build-type::release"
          else
            echo "::set-output name=release-build-option::"
            echo "::set-output name=build-type::debug"
          fi

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: llvm-tools-preview
          override: true

      - name: Straight build
        if: ${{ ! matrix.cross-target }}
        run: |
          cargo build ${{ steps.set-outputs.outputs.release-build-option }}

      - name: Install cross-build toolchain
        if: ${{ matrix.cross-target }}
        run: |
          rustup target add ${{ matrix.cross-target }}

      - name: Cross build
        if: ${{ matrix.cross-target }}
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: ${{ steps.set-outputs.outputs.release-build-option }} ${{ steps.set-outputs.outputs.target-option }}

      - name: create artifact
        run: |
          artifact_dir=springql_client-${{ steps.set-outputs.outputs.build-target }}-${{ steps.set-outputs.outputs.build-type }}
          target_dir=target/${{ matrix.cross-target }}/${{ steps.set-outputs.outputs.build-type }}

          mkdir ${artifact_dir}

          cp springql.h ${artifact_dir}/
          mv ${target_dir}/libspringql_client.{so,dylib} ${artifact_dir}/ || :

          zip -r ${artifact_dir}.zip ${artifact_dir}

      - name: Upload Files to a GitHub Release
        uses: svenstaro/upload-release-action@2.2.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: springql_client-${{ steps.set-outputs.outputs.build-target }}-${{ steps.set-outputs.outputs.build-type }}.zip
          tag: ${{ github.ref }}
          overwrite: true
          prerelease: false
